#!/usr/bin/python3 
from PyQt5.QtWidgets import QApplication, QMainWindow, QSplitter, QListWidgetItem, QFileDialog
from PyQt5.QtWidgets import QGridLayout, QListWidget, QFrame
from PyQt5.QtCore import Qt

import lxml.etree as ET
import pyqtgraph as pg
import sys
import threading

from lib.stringAxis import stringAxis
from lib.setDialog import setDialog
from lib.menubar import menubar

class TraceViewer(QMainWindow):
    def __init__(self):
        super().__init__()

        menubar(self)
        
        frame = QSplitter()
        self.setCentralWidget(frame)

        self.selection = QListWidget()
        self.selection.setEnabled(False)
        self.selection.itemClicked.connect(self.change)
        frame.addWidget(self.selection)

        self.rightGrid = QGridLayout()
        rightFrame = QFrame()
        rightFrame.setLayout(self.rightGrid)

        self.plot = pg.PlotWidget()
        self.legend = pg.LegendItem()
        self.legend.setParentItem(self.plot.getPlotItem())
        self.rightGrid.addWidget(self.plot)

        frame.addWidget(rightFrame)

        self.region = pg.LinearRegionItem()
        
        self.traceVariables = []
        self.plots = []

        if len(sys.argv) == 2:
            self.open(sys.argv[1])

        self.show()

    def openThread(self, i, traceVariable):
        times = list(map(str, traceVariable.find("Timestamps").text.split(',')))
        timedict = dict(enumerate(times))
        self.traceVariables.append({'title'     : traceVariable.attrib['VarName'],
                                    'timedict'  : list(timedict),
                                    'values'    : list(map(float, traceVariable.find("Values").text.split(',')))
                                    })

    def open(self, path=None):
        if not path:
            path = QFileDialog.getOpenFileName(self)[0]
        if path:
            tree = ET.parse(path)
            root = tree.getroot()
           
            threads = []
            for i, traceVariable in enumerate(root.iter("TraceVariable")):
                if i == 0:
                    times = list(map(str, traceVariable.find("Timestamps").text.split(',')))
                    timedict = dict(enumerate(times))
                    self.plot.hide()
                    self.rightGrid.removeWidget(self.plot)
                    self.timedict = timedict
                    self.plot = pg.PlotWidget(axisItems={'bottom' : stringAxis(self.timedict, orientation="bottom")})
                    self.legend = pg.LegendItem()
                    self.legend.setParentItem(self.plot.getPlotItem())
                    self.rightGrid.addWidget(self.plot)
                    self.traceVariables.append({'title'     : traceVariable.attrib['VarName'],
                                                'timedict'  : list(timedict),
                                                'values'    : list(map(float, traceVariable.find("Values").text.split(',')))
                                                })
                else:
                    t = threading.Thread( target = self.openThread, args = (i, traceVariable))
                    t.start()
                    threads.append(t)

            for thread in threads:
                thread.join()

            if len(self.traceVariables) > 0:
                self.selection.setEnabled(True)
                for traceVariable in self.traceVariables:
                    item = QListWidgetItem(traceVariable['title'], self.selection)
                    item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    item.setCheckState(Qt.Unchecked)

                self.change(self.selection.item(0))

            else:
                self.selection.setEnabled(False)

    def change(self, item):
        if not self.splitButton.isChecked():
            if item.checkState() == Qt.Unchecked:
                self.add(item)
                item.setCheckState(Qt.Checked)
            else:
                self.remove(item)
                item.setCheckState(Qt.Unchecked)
        else:
            if item.checkState() == Qt.Unchecked:
                self.add(item, False)
                item.setCheckState(Qt.Checked)
            else:
                self.remove(item)
                item.setCheckState(Qt.Unchecked)

    def add(self, item, hide = True):
        for i, traceVariable in enumerate(self.traceVariables):
            if traceVariable['title'] == item.data(0):
                tmp = pg.PlotDataItem(traceVariable['timedict'], traceVariable['values'], name = traceVariable['title'], pen = (i, 10))
                self.plot.addItem(tmp)
                self.legend.addItem(tmp, item.data(0))

                if self.splitButton.isChecked():
                    self.addSplitGraph(traceVariable, item, i)

                break

    def remove(self, item):
        for i, traceVariable in enumerate(self.traceVariables):
            if traceVariable['title'] == item.data(0):
                for plotdataitem in self.plot.getPlotItem().listDataItems():
                    if plotdataitem.name() == item.data(0):
                        self.plot.removeItem(plotdataitem)

                self.legend.removeItem(item.data(0))
                
                if self.splitButton.isChecked():
                    for plot in self.plots:
                        if plot.getPlotItem().listDataItems()[0].name() == item.data(0):
                            plot.hide()
                            self.rightGrid.removeWidget(plot)
                            break
                break

    def auto(self):
        self.plot.autoRange()
        for plot in self.plots:
            plot.autoRange()

    def region(self):
        if not self.regionButton.isChecked():
            self.regionButton.setChecked(False)
            self.plot.removeItem(self.region)
        else:
            self.regionButton.setChecked(True)
            xr = self.plot.viewRange()[0]
            w = xr[1] - xr[0]
            w = w / 2
            s = xr[0] + w/2
            e = xr[0] + w
            self.region.setRegion([s, e])
            self.plot.addItem(self.region)

    def update(self):
        if self.regionButton.isChecked():
            try:
                tmp = self.region.getRegion()
                f = int(self.timedict[int(tmp[1])])
                s = int(self.timedict[int(tmp[0])])
                tmp = "delta = " + str(f-s)
            except:
                tmp = "out of bounds error"
            self.status.showMessage(tmp)
            for i in range(self.selection.count()):
                item = self.selection.item(i)
                if item.checkState() == Qt.Checked:
                    points = self.region.getRegion()
                    findex = min(range(len(self.traceVariables[i]['timedict'])),
                            key = lambda x :abs(self.traceVariables[i]['timedict'][x] - points[0]))
                    sindex = min(range(len(self.traceVariables[i]['timedict'])),
                            key = lambda x :abs(self.traceVariables[i]['timedict'][x] - points[1]))

                    display = " (" + str(self.traceVariables[i]['values'][findex])[:8] + ','
                    display += str(self.traceVariables[i]['values'][sindex])[:8] + ')'

                    item.setData(Qt.DisplayRole, self.traceVariables[i]['title'] + display)
        else:
            self.status.showMessage(" ")
            for i in range(self.selection.count()):
                item = self.selection.item(i)
                item.setData(Qt.DisplayRole, self.traceVariables[i]['title'])

    def split(self):
        if self.splitButton.isChecked():
            self.syncButton.setEnabled(True)

            self.plot.hide()

            for i in range(self.selection.count()):
                item = self.selection.item(i)
                if item.checkState() == Qt.Checked:
                    for traceVariable in self.traceVariables:
                        if traceVariable['title'] == item.data(0):
                            self.addSplitGraph(traceVariable, item, i)

            self.splitButton.setChecked(True)

        else:
            self.syncButton.setEnabled(False)

            for plot in self.plots:
                plot.hide()
                self.rightGrid.removeWidget(plot)
            
            self.plots = []

            self.plot.show()

            self.splitButton.setChecked(False)

    def syncToggle(self):
        self.sync = not self.sync

    def syncAxis(self, item):
        if self.sync:
            item.blockSignals(True)
            for plot in self.plots:
                r = item.viewRange()
                if r != plot.viewRange():
                    plot.getPlotItem().blockSignals(True)
                    plot.setRange(xRange=r[0])
                    plot.getPlotItem().blockSignals(False)
            item.blockSignals(False)

    def addSplitGraph(self, traceVariable, item, i):
        p = pg.PlotWidget(axisItems={'bottom' : stringAxis(self.timedict, orientation="bottom")})
        l = pg.LegendItem()
        j = p.getPlotItem()
        l.setParentItem(j)
        j.sigRangeChanged.connect(self.syncAxis)
        tmp = pg.PlotDataItem(traceVariable['timedict'], 
                              traceVariable['values'], 
                              name = traceVariable['title'], 
                              pen = (i, 10))
        l.addItem(tmp, item.data(0))
        p.addItem(tmp)
        self.plots.append(p)
        self.rightGrid.addWidget(p)

app = QApplication(sys.argv)

masterView = TraceViewer()

sys.exit(app.exec_())
