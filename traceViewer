#!/usr/bin/python3 
from PyQt5.QtWidgets import QApplication, QMainWindow, QSplitter, QAction, QListWidgetItem, QFileDialog
from PyQt5.QtWidgets import QGridLayout, QDialog, QDialogButtonBox, QListWidget, QLabel, QLineEdit, QFrame
from PyQt5.QtCore import Qt, QTimer

import xml.etree.ElementTree as ET
import pyqtgraph as pg
import sys

class setDialog(QDialog):
    def __init__(self):
        super(setDialog, self).__init__()

        layout = QGridLayout()
        self.setLayout(layout)

        layout.addWidget(QLabel("X:",self), 0, 0)
        layout.addWidget(QLabel("Y:",self), 1, 0)

        self.x0 = QLineEdit("0",self)
        layout.addWidget(self.x0, 0, 1)
        self.x1 = QLineEdit("1",self)
        layout.addWidget(self.x1, 0, 2)

        self.y0 = QLineEdit("0",self)
        layout.addWidget(self.y0, 1, 1)
        self.y1 = QLineEdit("1",self)
        layout.addWidget(self.y1, 1, 2)

        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttonBox.button(QDialogButtonBox.Ok).clicked.connect(self.accept)
        buttonBox.button(QDialogButtonBox.Cancel).clicked.connect(self.reject)

        layout.addWidget(buttonBox, 2, 0, 1, 3)

    @staticmethod
    def getInfo():
        dialog = setDialog()
        result = dialog.exec_()
        if result:
            result = [dialog.x0.text(), dialog.x1.text(), dialog.y0.text(), dialog.y1.text()]
            result = list(map(float, result))
            return result
        else:
            return False


class TraceViewer(QMainWindow):
    def __init__(self):
        super().__init__()

        menu = self.menuBar()
        fileMenu = menu.addMenu('&File')
        openButton = QAction('&Open', self)
        openButton.triggered.connect(self.open)
        fileMenu.addAction(openButton)

        self.timer = QTimer()
        self.timer.timeout.connect(self.update)
        self.timer.start(50)

        self.status = self.statusBar()

        viewMenu = menu.addMenu('&View')
        autoButton = QAction('&Auto Axis', self)
        autoButton.triggered.connect(self.auto)
        viewMenu.addAction(autoButton)

        setButton = QAction('&Set Axis...', self)
        setButton.triggered.connect(self.set)
        viewMenu.addAction(setButton)

        self.splitButton = QAction('&Split Axis', self)
        self.splitButton.triggered.connect(self.split)
        self.splitButton.setCheckable(True)
        self.splitButton.setChecked(False)
        viewMenu.addAction(self.splitButton)

        self.syncButton = QAction('&Sync Split Axis', self)
        self.syncButton.triggered.connect(self.syncToggle)
        self.syncButton.setCheckable(True)
        self.syncButton.setEnabled(False)
        self.syncButton.setChecked(False)
        viewMenu.addAction(self.syncButton)
        self.sync = False

        self.regionButton = QAction('&Toggle Region', self)
        self.regionButton.triggered.connect(self.region)
        self.regionButton.setCheckable(True)
        self.regionButton.setChecked(False)
        viewMenu.addAction(self.regionButton)
        
        frame = QSplitter()
        self.setCentralWidget(frame)

        self.selection = QListWidget()
        self.selection.setEnabled(False)
        self.selection.itemClicked.connect(self.change)
        frame.addWidget(self.selection)

        self.rightGrid = QGridLayout()
        rightFrame = QFrame()
        rightFrame.setLayout(self.rightGrid)

        self.plot = pg.PlotWidget()
        self.legend = pg.LegendItem()
        self.legend.setParentItem(self.plot.getPlotItem())
        self.rightGrid.addWidget(self.plot)

        frame.addWidget(rightFrame)

        self.region = pg.LinearRegionItem()
        
        self.traceVariables = []
        self.plots = []
        self.legends = []

        self.show()

    def open(self):
        path = QFileDialog.getOpenFileName(self)
        if path[0]:
            tree = ET.parse(path[0])
            root = tree.getroot()
            for i, traceVariable in enumerate(root.iter("TraceVariable")):
                times = list(map(int, traceVariable.findall("Timestamps")[0].text.split(',')))
                values = list(map(float, traceVariable.findall("Values")[0].text.split(',')))

                tmp = {}
                timedict = dict(enumerate(times))
                stringaxis = pg.AxisItem(orientation="bottom")
                stringaxis.setTicks([timedict.items()])

                tmp['title'] = traceVariable.attrib['VarName']
                tmp['plot'] = pg.PlotDataItem(list(timedict.keys()), values, name = tmp['title'], pen = (i, 10), axisItem={'bottom' : stringaxis})
                tmp['plots'] = pg.PlotDataItem(list(timedict.keys()), values, name = tmp['title'], pen = (i, 10))
                tmp['tnv'] = [list(timedict.keys()), values]
                self.traceVariables.append(tmp)
            
            self.selection.clear()
            self.plot.clear()

            if len(self.traceVariables) > 0:
                self.selection.setEnabled(True)
                for traceVariable in self.traceVariables:
                    item = QListWidgetItem(traceVariable['title'], self.selection)
                    item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    item.setCheckState(Qt.Unchecked)

                self.change(self.selection.item(0))

            else:
                self.selection.setEnabled(False)

    def change(self, item):
        if not self.splitButton.isChecked():
            if item.checkState() == Qt.Unchecked:
                self.add(item)
                item.setCheckState(Qt.Checked)
            else:
                self.remove(item)
                item.setCheckState(Qt.Unchecked)
        else:
            if item.checkState() == Qt.Unchecked:
                self.add(item, False)
                item.setCheckState(Qt.Checked)
            else:
                self.remove(item)
                item.setCheckState(Qt.Unchecked)

    def add(self, item, hide = True):
        for i, traceVariable in enumerate(self.traceVariables):
            if traceVariable['title'] == item.data(0):
                self.plot.addItem(traceVariable['plot'])
                self.legend.addItem(traceVariable['plot'], item.data(0))

                p = pg.PlotWidget()
                if hide:
                    p.hide()
                l = pg.LegendItem()
                j = p.getPlotItem()
                l.setParentItem(j)
                j.sigRangeChanged.connect(self.syncAxis)
                l.addItem(traceVariable['plots'], item.data(0))
                p.addItem(traceVariable['plots'])
                self.plots.append([p, i])
                self.legends.append(l)
                self.rightGrid.addWidget(p)

                break

    def remove(self, item):
        for i, traceVariable in enumerate(self.traceVariables):
            if traceVariable['title'] == item.data(0):
                self.plot.removeItem(traceVariable['plot'])
                self.legend.removeItem(item.data(0))

                for plot in self.plots:
                    if plot[1] == i:
                        plot[0].hide()
                        self.plots.remove(plot)

                break

    def auto(self):
        self.plot.autoRange()

    def set(self):
        r = setDialog.getInfo()
        if r:
            if not self.splitButton.isChecked():
                self.plot.setRange(xRange=r[0:2], yRange=r[2:4])
            else:
                for plot in self.plots:
                    plot[0].setRange(xRange=r[0:2], yRange=r[2:4])

    def region(self):
        if not self.regionButton.isChecked():
            self.regionButton.setChecked(False)
            self.plot.removeItem(self.region)
        else:
            self.regionButton.setChecked(True)
            xr = self.plot.viewRange()[0]
            w = xr[1] - xr[0]
            w = w / 2
            s = xr[0] + w/2
            e = xr[0] + w
            self.region.setRegion([s, e])
            self.plot.addItem(self.region)

    def update(self):
        if self.regionButton.isChecked():
            tmp = self.region.getRegion()
            tmp = "delta = " + str(tmp[1]-tmp[0])
            self.status.showMessage(tmp)
            for i in range(self.selection.count()):
                item = self.selection.item(i)
                if item.checkState() == Qt.Checked:
                    points = self.region.getRegion()
                    findex = min(range(len(self.traceVariables[i]['tnv'][0])),
                            key = lambda x :abs(self.traceVariables[i]['tnv'][0][x] - points[0]))
                    sindex = min(range(len(self.traceVariables[i]['tnv'][0])),
                            key = lambda x :abs(self.traceVariables[i]['tnv'][0][x] - points[1]))

                    display = " (" + str(self.traceVariables[i]['tnv'][1][findex]) + ','
                    display += str(self.traceVariables[i]['tnv'][1][sindex]) + ')'

                    item.setData(Qt.DisplayRole, self.traceVariables[i]['title'] + display)
                else:
                    item.setData(Qt.DisplayRole, self.traceVariables[i]['title'])
        else:
            self.status.showMessage(" ")
            for i in range(self.selection.count()):
                item = self.selection.item(i)
                item.setData(Qt.DisplayRole, self.traceVariables[i]['title'])

    def split(self):
        if self.splitButton.isChecked():
            self.syncButton.setEnabled(True)
            self.plot.hide()
            for plot in self.plots:
                plot[0].show()

            self.splitButton.setChecked(True)

        else:
            self.syncButton.setEnabled(False)
            for plot in self.plots:
                plot[0].hide()
            self.plot.show()

            self.splitButton.setChecked(False)

    def syncToggle(self):
        self.sync = not self.sync

    def syncAxis(self, item):
        if self.sync:
            item.blockSignals(True)
            for plot in self.plots:
                r = item.viewRange()
                if r != plot[0].viewRange():
                    plot[0].getPlotItem().blockSignals(True)
                    plot[0].setRange(xRange=r[0], yRange=r[1])
                    plot[0].getPlotItem().blockSignals(False)
            item.blockSignals(False)

app = QApplication(sys.argv)

masterView = TraceViewer()

sys.exit(app.exec_())
