#!/usr/bin/python3 
from PyQt5.QtWidgets import QApplication, QMainWindow, QSplitter, QListWidgetItem, QFileDialog, QInputDialog, QProgressDialog
from PyQt5.QtWidgets import QGridLayout, QListWidget, QFrame
from PyQt5.QtCore import Qt

import lxml.etree as ET
import pyqtgraph as pg
import sys
import csv
from threading import Thread
from datetime import date, time, datetime

from lib.stringAxis import stringAxis
from lib.setDialog import setDialog
from lib.menubar import menubar

class TraceViewer(QMainWindow):
    def __init__(self):
        super().__init__()

        menubar(self)
        
        frame = QSplitter()
        self.setCentralWidget(frame)

        self.selection = QListWidget()
        self.selection.setEnabled(False)
        self.selection.itemClicked.connect(self.change)
        frame.addWidget(self.selection)

        self.rightGrid = QGridLayout()
        rightFrame = QFrame()
        rightFrame.setLayout(self.rightGrid)

        self.plot = pg.PlotWidget()
        self.legend = pg.LegendItem()
        self.legend.setParentItem(self.plot.getPlotItem())
        self.rightGrid.addWidget(self.plot)

        frame.addWidget(rightFrame)

        self.region = pg.LinearRegionItem()
        
        self.traceVariables = []
        self.plots = []

        if len(sys.argv) == 2:
            self.open(sys.argv[1])

        self.show()

    def openThread(self, traceVariable, resample, factor):
        times = list(map(int, traceVariable.find("Timestamps").text.split(',')))
        values = list(map(float, traceVariable.find("Values").text.split(',')))
        
        if resample:
            values = values[::factor]
            times = times[::factor]

        times = list(map(int, times))
        times = list(map(str, times))

        timedict = dict(enumerate(times))
        self.traceVariables.append({'title'     : traceVariable.attrib['VarName'],
                                    'timedict'  : list(timedict),
                                    'values'    : values
                                    })

    def open(self, path=None):
        if not path:
            path = QFileDialog.getOpenFileName(self)[0]
        if path:
            self.selection.clear()
            self.traceVariables = []
            if "trace" in path.split(".")[-1]:
                self.open_somachine(path)
            else:
                self.open_studio5000(path)

            if len(self.traceVariables) > 0:
                self.selection.setEnabled(True)
                for traceVariable in self.traceVariables:
                    item = QListWidgetItem(traceVariable['title'], self.selection)
                    item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    item.setCheckState(Qt.Unchecked)

                self.change(self.selection.item(0))

            else:
                self.selection.setEnabled(False)

    def open_somachine(self, path):
        tree = ET.parse(path)
        root = tree.getroot()

        threads = []
        samples = 0
        factor = 1
        resample = False

        for i, traceVariable in enumerate(root.iter("TraceVariable")):
            if i == 0:
                times = list(map(int, traceVariable.find("Timestamps").text.split(',')))
                values = list(map(float, traceVariable.find("Values").text.split(',')))

                if len(times) > 100000:
                    string = "You have " + str(len(times)) + " samples in this trend.\n"
                    string+= "This can cause unwanted slowness of the program.\n"
                    string+= "A max range of 50000 to 90000 depending on the performace of the computer is desired.\n"
                    string+= "You can decrease the number of samples below.\n"
                    samples, resample = QInputDialog.getInt(self, "Warning:", string, len(times))

                    if samples == len(times):
                        resample = False

                    if resample:
                        factor = round(len(values) / samples)
                        values = values[::factor]
                        times = times[::factor]

                times = list(map(int, times))
                times = list(map(str, times))
                self.setup(times)

                self.traceVariables.append({'title'     : traceVariable.attrib['VarName'],
                                            'timedict'  : list(self.timedict),
                                            'values'    : values
                                            })

                pb = QProgressDialog("Generating...", "Cancel", 0, len(root.findall(".//TraceVariable")), self)

            else:
                t = Thread(target = self.openThread, args = (traceVariable, resample, factor))
                t.start()
                threads.append(t)

            pb.setValue(i)
            QApplication.processEvents()

        for thread in threads:
            thread.join()

        pb.close()

    def setup(self, times):
        timedict = dict(enumerate(times))
        self.plot.hide()
        self.rightGrid.removeWidget(self.plot)
        self.timedict = timedict
        self.plot = pg.PlotWidget(axisItems={'bottom' : stringAxis(self.timedict, orientation="bottom")})
        self.legend = pg.LegendItem()
        self.legend.setParentItem(self.plot.getPlotItem())
        self.rightGrid.addWidget(self.plot)

    def open_studio5000(self, path):
        with open(path) as csvfile:
            csvreader = csv.reader(csvfile)

            times = []
            for row in csvreader:
                try: times.append(row[2])
                except IndexError: pass

            times = times[3:]
            self.setup(times)
            csvfile.seek(0)

            titles = []
            values = []
            afterHeader = False
            for row in csvreader:
                if afterHeader:
                    for i in range(len(titles)):
                        try: values[i].append(row[3+i])
                        except IndexError: pass
                if "Header:" in row:
                    for cell in row:
                        if "Program:" in cell:
                            titles.append(cell.replace("Program:", ""))
                    for i in range(len(titles)):
                        values.append([])
                    afterHeader = True

            for i in range(len(titles)):
                self.traceVariables.append({'title'     : titles[i],
                                            'timedict'  : list(self.timedict),
                                            'values'    : list(map(float, values[i]))
                                            })

    def change(self, item):
        if not self.splitButton.isChecked():
            if item.checkState() == Qt.Unchecked:
                self.add(item)
                item.setCheckState(Qt.Checked)
            else:
                self.remove(item)
                item.setCheckState(Qt.Unchecked)
        else:
            if item.checkState() == Qt.Unchecked:
                self.add(item, False)
                item.setCheckState(Qt.Checked)
            else:
                self.remove(item)
                item.setCheckState(Qt.Unchecked)

    def add(self, item, hide = True):
        for i, traceVariable in enumerate(self.traceVariables):
            if traceVariable['title'] == item.data(0):
                tmp = pg.PlotDataItem(traceVariable['timedict'], traceVariable['values'], name = traceVariable['title'], pen = (i, 10))
                self.plot.addItem(tmp)
                self.legend.addItem(tmp, item.data(0))

                if self.splitButton.isChecked():
                    self.addSplitGraph(traceVariable, item, i)

                break

    def remove(self, item):
        for i, traceVariable in enumerate(self.traceVariables):
            if traceVariable['title'] == item.data(0):
                for plotdataitem in self.plot.getPlotItem().listDataItems():
                    if plotdataitem.name() == item.data(0):
                        self.plot.removeItem(plotdataitem)

                self.legend.removeItem(item.data(0))
                
                if self.splitButton.isChecked():
                    for plot in self.plots:
                        if plot.getPlotItem().listDataItems()[0].name() == item.data(0):
                            plot.hide()
                            self.rightGrid.removeWidget(plot)
                            break
                break

    def auto(self):
        self.plot.autoRange()
        for plot in self.plots:
            plot.autoRange()

    def region(self):
        if not self.regionButton.isChecked():
            self.splitButton.setEnabled(True)
            self.regionButton.setChecked(False)
            self.plot.removeItem(self.region)
        else:
            self.splitButton.setEnabled(False)
            self.regionButton.setChecked(True)
            xr = self.plot.viewRange()[0]
            w = xr[1] - xr[0]
            w = w / 2
            s = xr[0] + w/2
            e = xr[0] + w
            self.region.setRegion([s, e])
            self.plot.addItem(self.region)

    def update(self):
        if self.regionButton.isChecked():
            tmp = self.region.getRegion()
            try:
                f = self.timedict[int(tmp[1])]
                s = self.timedict[int(tmp[0])]
                try:
                    tmp = "delta = " + str(int(f)-int(s))
                except ValueError:
                    fhour, fminute, fsecond = f.split(":")
                    fsecond, fms = fsecond.split(";")
                    f = time(int(fhour), int(fminute), int(fsecond), int(fms))
                    f = datetime.combine(date.today(), f)

                    shour, sminute, ssecond = s.split(":")
                    ssecond, sms = ssecond.split(";")
                    s = time(int(shour), int(sminute), int(ssecond), int(sms))
                    s = datetime.combine(date.today(), s)

                    tmp = "delta = " + str(f - s)
            except (KeyError, AttributeError):
                tmp = "out of bounds error"

            self.status.showMessage(tmp)

            for i in range(self.selection.count()):
                item = self.selection.item(i)
                if item.checkState() == Qt.Checked:
                    points = self.region.getRegion()
                    findex = min(range(len(self.traceVariables[i]['timedict'])),
                            key = lambda x :abs(self.traceVariables[i]['timedict'][x] - points[0]))
                    sindex = min(range(len(self.traceVariables[i]['timedict'])),
                            key = lambda x :abs(self.traceVariables[i]['timedict'][x] - points[1]))

                    display = " (" + str(self.traceVariables[i]['values'][findex])[:8] + ','
                    display += str(self.traceVariables[i]['values'][sindex])[:8] + ')'

                    item.setData(Qt.DisplayRole, self.traceVariables[i]['title'] + display)
        else:
            self.status.showMessage(" ")
            for i in range(self.selection.count()):
                item = self.selection.item(i)
                item.setData(Qt.DisplayRole, self.traceVariables[i]['title'])

    def split(self):
        if self.splitButton.isChecked():
            self.regionButton.setEnabled(False)
            self.syncButton.setEnabled(True)

            self.plot.hide()

            for i in range(self.selection.count()):
                item = self.selection.item(i)
                if item.checkState() == Qt.Checked:
                    for traceVariable in self.traceVariables:
                        if traceVariable['title'] == item.data(0):
                            self.addSplitGraph(traceVariable, item, i)

            self.splitButton.setChecked(True)

        else:
            self.regionButton.setEnabled(True)
            self.syncButton.setEnabled(False)

            for plot in self.plots:
                plot.hide()
                self.rightGrid.removeWidget(plot)
            
            self.plots = []

            self.plot.show()

            self.splitButton.setChecked(False)

    def syncToggle(self):
        self.sync = not self.sync

    def syncAxis(self, item):
        if self.sync:
            item.blockSignals(True)
            for plot in self.plots:
                r = item.viewRange()
                if r != plot.viewRange():
                    plot.getPlotItem().blockSignals(True)
                    plot.setRange(xRange=r[0])
                    plot.getPlotItem().blockSignals(False)
            item.blockSignals(False)

    def addSplitGraph(self, traceVariable, item, i):
        p = pg.PlotWidget(axisItems={'bottom' : stringAxis(self.timedict, orientation="bottom")})
        l = pg.LegendItem()
        j = p.getPlotItem()
        l.setParentItem(j)
        j.sigRangeChanged.connect(self.syncAxis)
        tmp = pg.PlotDataItem(traceVariable['timedict'], 
                              traceVariable['values'], 
                              name = traceVariable['title'], 
                              pen = (i, 10))
        l.addItem(tmp, item.data(0))
        p.addItem(tmp)
        self.plots.append(p)
        self.rightGrid.addWidget(p)

app = QApplication(sys.argv)

masterView = TraceViewer()

sys.exit(app.exec_())
